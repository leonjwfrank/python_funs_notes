# dock 连接mysql


## 一，docker 容器间连接
         业务配置准备
                .env
                         FLASK_APP=InnsOwl.py
                         FLASK_CONFIG=production
                DATABASE_URL=mysql+pymysql://innsowl:innsowl@127.0.0.1:3306/innsowl
       .env-mysql
                  MYSQL_RANDOM_ROOT_PASSWORD=yes
    MYSQL_DATABASE=innsowl
    MYSQL_USER=innsowl
    MYSQL_PASSWORD=innsowl

### 1，docker search mysql        #搜索镜像
### 2，docker pull mysql           #获取镜像
### 3，启动数据库容器 
        docker run --name mysql -d -e MYSQL_RANDOM_ROOT_PASSWORD=yes -e MYSQL_DATABASE=innsowl -e MYSQL_USER=innsowl -e MYSQL_PASSWORD=innsowl mysql:latest
        # MYSQL_RANDOM_ROOT_PASSWORD 表示随机生成一个root密码，使用docker logs mysql 查看日志
                [Server] root@localhost is created with an empty password ! Please consider switching off the --initialize-insecure option.
        # MYSQL_DATABASE  创建一个全新数据库 innsowl，并允许用户innsowl 以密码 innsowl访问
        # 加内外部端口映射-p  3306:3306可能启动
        

### 4, 添加依赖库支持
                在requirements/docker.txt重新构建容器映像
                        docker build -t  innsowl:latest .

### 5, 启动应用容器
                docker run -d -p 9000:6000 --link mysql:dbserver -e DATABASE_URL=mysql+pymysql://innsowl:innsowl@dbserver/innsowl innsowl:515site

        docker run -d -p 8090:6000 --link mysql:dbserver -e DATABASE_URL=mysql+pymysql://innsowl:innsowl@dbserver/innsowl innsowl:515site

### 6, 直接使用mysql/mysql-server:5.7
        # 启动mysql
        docker run --name mysql -d -e MYSQL_RANDOM_ROOT_PASSWORD=yes -e MYSQL_DATABASE=innsowl -e MYSQL_USER=innsowl -e MYSQL_PASSWORD=innsowl mysql/mysql-server:5.7
        # 查看日志：
                docker logs 377f2b95fc25  / docker container  logs 377f2b95fc25
    [Entrypoint] MySQL Docker Image 5.7.26-1.1.11
    [Entrypoint] Initializing database
    [Entrypoint] Database initialized
        Warning: Unable to load '/usr/share/zoneinfo/iso3166.tab' as time zone. Skipping it.
        Warning: Unable to load '/usr/share/zoneinfo/leapseconds' as time zone. Skipping it.
        Warning: Unable to load '/usr/share/zoneinfo/tzdata.zi' as time zone. Skipping it.
        Warning: Unable to load '/usr/share/zoneinfo/zone.tab' as time zone. Skipping it.
        Warning: Unable to load '/usr/share/zoneinfo/zone1970.tab' as time zone. Skipping it.
    [Entrypoint] GENERATED ROOT PASSWORD: LyxEsfac8IzjERaM0x!UDZyP#ed

    [Entrypoint] ignoring /docker-entrypoint-initdb.d/*

    [Entrypoint] Server shut down

    [Entrypoint] MySQL init process done. Ready for start up.

    [Entrypoint] Starting MySQL 5.7.26-1.1.11
        # 启动业务
                

## 二，容器业务连接外部数据库
        # 进入容器操作
        docker exec -it mysql bash

## 三，markdown文章存到数据库时，img标签被破坏

 

# Dockerfile 样本文件

    FROM debian:jessie-slim

    # add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added
    RUN groupadd -r mongodb && useradd -r -g mongodb mongodb

    RUN apt-get update \
        && apt-get install -y --no-install-recommends \
            ca-certificates \
            jq \
            numactl \
        && rm -rf /var/lib/apt/lists/*

    # grab gosu for easy step-down from root (https://github.com/tianon/gosu/releases)
    ENV GOSU_VERSION 1.10
    # grab "js-yaml" for parsing mongod's YAML config files (https://github.com/nodeca/js-yaml/releases)
    ENV JSYAML_VERSION 3.10.0

    RUN set -ex; \
    \
    apt-get update; \
    apt-get install -y --no-install-recommends \
        wget \
    ; \
    rm -rf /var/lib/apt/lists/*; \
    \
    dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"; \
    wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; \
    wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; \
    export GNUPGHOME="$(mktemp -d)"; \
    gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \
    gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \
    command -v gpgconf && gpgconf --kill all || :; \
    rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc; \
    chmod +x /usr/local/bin/gosu; \
    gosu nobody true; \
    \
    wget -O /js-yaml.js "https://github.com/nodeca/js-yaml/raw/${JSYAML_VERSION}/dist/js-yaml.js"; \
    # TODO some sort of download verification here
        \
        apt-get purge -y --auto-remove wget

    RUN mkdir /docker-entrypoint-initdb.d

    ENV GPG_KEYS \
    # pub   4096R/AAB2461C 2014-02-25 [expires: 2016-02-25]
    #       Key fingerprint = DFFA 3DCF 326E 302C 4787  673A 01C4 E7FA AAB2 461C
    # uid                  MongoDB 2.6 Release Signing Key <packaging@mongodb.com>
    DFFA3DCF326E302C4787673A01C4E7FAAAB2461C \
    # pub   4096R/EA312927 2015-10-09 [expires: 2017-10-08]
    #       Key fingerprint = 42F3 E95A 2C4F 0827 9C49  60AD D68F A50F EA31 2927
    # uid                  MongoDB 3.2 Release Signing Key <packaging@mongodb.com>
        42F3E95A2C4F08279C4960ADD68FA50FEA312927
        # https://docs.mongodb.com/manual/tutorial/verify-mongodb-packages/#download-then-import-the-key-file
    RUN set -ex; \
    export GNUPGHOME="$(mktemp -d)"; \
    for key in $GPG_KEYS; do \
        gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$key"; \
    done; \
    gpg --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mongodb.gpg; \
    command -v gpgconf && gpgconf --kill all || :; \
    rm -r "$GNUPGHOME"; \
    apt-key list

    # Allow build-time overrides (eg. to build image with MongoDB Enterprise version)
    # Options for MONGO_PACKAGE: mongodb-org OR mongodb-enterprise
    # Options for MONGO_REPO: repo.mongodb.org OR repo.mongodb.com
    # Example: docker build --build-arg MONGO_PACKAGE=mongodb-enterprise --build-arg MONGO_REPO=repo.mongodb.com .
    ARG MONGO_PACKAGE=mongodb-org
    ARG MONGO_REPO=repo.mongodb.org
    ENV MONGO_PACKAGE=${MONGO_PACKAGE} MONGO_REPO=${MONGO_REPO}

    ENV MONGO_MAJOR 3.2
    ENV MONGO_VERSION 3.2.20

    RUN echo "deb http://$MONGO_REPO/apt/debian jessie/${MONGO_PACKAGE%-unstable}/$MONGO_MAJOR main" | tee "/etc/apt/sources.list.d/${MONGO_PACKAGE%-unstable}.list"

    RUN set -x \
        && apt-get update \
        && apt-get install -y \
            ${MONGO_PACKAGE}=$MONGO_VERSION \
            ${MONGO_PACKAGE}-server=$MONGO_VERSION \
            ${MONGO_PACKAGE}-shell=$MONGO_VERSION \
            ${MONGO_PACKAGE}-mongos=$MONGO_VERSION \
            ${MONGO_PACKAGE}-tools=$MONGO_VERSION \
        && rm -rf /var/lib/apt/lists/* \
        && rm -rf /var/lib/mongodb \
        && mv /etc/mongod.conf /etc/mongod.conf.orig

    RUN mkdir -p /data/db /data/configdb \
        && chown -R mongodb:mongodb /data/db /data/configdb
    VOLUME /data/db /data/configdb

    COPY docker-entrypoint.sh /usr/local/bin/
    RUN ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat
    ENTRYPOINT ["docker-entrypoint.sh"]

    EXPOSE 27017
    CMD ["mongod"]